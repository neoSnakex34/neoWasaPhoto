openapi: 3.0.1
info:
  title: WasaPhoto
  description: |
    API specification for WASAPhoto, University project
    for web and software architecture course.
  version: 1.0.2

servers:
  - url: http://localhost:3000

tags:
  - name: "User"
    description: endpoints for users related operations
  - name: "Comments"
    description: endpoints for comments related operations
  - name: "Login"
    description: enpoints for loggin in action
  - name: "Photo"
    description: endpoints for photo related operations
  - name: "Follow"
    description: endpoints for follow related operations
  - name: "Ban"
    description: endpoints for ban related operations
  - name: "Like"
    description: endpoints for like related operations

paths:
  /login:
    post:
      security:
        - bearerAuth: []
      tags:
        - Login
      summary: logs in the  user
      description: |-
        if the user does not exist it will be created
        else it will be logged in; either way the userId is returned
      operationId: doLogin
      requestBody:
        description: Username to be used for loggin in
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserName"

        required: true

      responses:
        "201":
          description: user log in action succesful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "400":
          $ref: "#/components/responses/BadRequest"

        "403":
          $ref: "#/components/responses/Forbidden"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /users:
    get:
      security:
      - bearerAuth: []
      tags:
        - User
      summary: retrieves all users
      description: returns a list of all users registered on the platform
      operationId: getUserList
      responses:
        "200":
          description: list of all users retrieved succesfully
          content:
            application/json:
              schema:
                type: array
                description: array of users with extra info retrieved from query
                items:
                  $ref: "#/components/schemas/UserFromQuery"
                minItems: 0
                maxItems: 1000 # i don't want to include this check in implementation... the only limit should be server limit or display page, i MUST check for all users...


        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/profile:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
        # consider putting this under profile tag, or at least # # add 2 tags
      summary: gets user profile
      description: returns the profile of the user or an error if the user does not exist
      operationId: getUserProfile
      parameters:
        - $ref: "#/components/parameters/userId"

      responses:
        "200":
          description: user profile retrieved succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"

        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden" # if banned or no auth
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/username:
    description: username specific field of the user, can be set or updated
    parameters:
      - $ref: "#/components/parameters/userId"

    put:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: change the username
      description: used to update the userneme or setting it for the current user logged in
      operationId: setMyUserName
      requestBody:
        description: a username to be set
        required: true
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/UserName"

      responses:
        "204":
          description: username set succesfully

        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/stream:
    parameters:
      - $ref: "#/components/parameters/userId"

    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: retrieves the stream of a user
      description: |-
        returns personal stream of photos for the user
        parameters
      operationId: getMyStream
      responses:
        "200":
          description: user stream retrieved successfully
          content:
            application/json:
              schema:
                type: array
                description: list of photos in the stream
                items:
                  $ref: "#/components/schemas/Photo"
                minItems: 0
                maxItems: 1000 # just as an example
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/followers/{followerId}:
    parameters:
      - $ref: "#/components/parameters/userId" #followed by followerId
      - $ref: "#/components/parameters/followerId" #followed

    put:
      security:
        - bearerAuth: []
      tags:
        - Follow
      summary: follow a user

      description: the action of following a user y from user x
      operationId: followUser

      responses:
        "204":
          description: user followed succesfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - bearerAuth: []
      tags:
        - Follow
      summary: unfollow a user
      description: the action of unfollowin a user y from user x
      operationId: unfollowUser
      responses:
        "204":
          description: follower removed succesfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/bans/{bannerId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/bannerId"

    put:
      security:
        - bearerAuth: []
      tags:
        - Ban
      summary: ban a user
      description: the action of banning a user y from user x return username of banned user
      operationId: banUser

      responses:
        "204":
          description: user banned succesfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - bearerAuth: []
      tags:
        - Ban
      summary: unban a user
      description: the action of removing a ban status from a y user by user x
      operationId: unbanUser

      responses:
        "204":
          description: user unbanned succesfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #return here
  /users/{userId}/photos:
    parameters:
      - $ref: "#/components/parameters/userId"
    post:
      security:
        - bearerAuth: []
      tags:
        - Photo
      summary: upload of a photo
      description: |-
        posts a new photo on the user's profile, returns the photoid
      operationId: uploadPhoto
      requestBody:
        description: the file of the photo to be uploaded
        content:
          image/png:
            schema:
              $ref: "#/components/schemas/PhotoFile"
          image/jpeg:
            schema:
              $ref: "#/components/schemas/PhotoFile"
        required: true

      responses:
        "201":
          description: photo uploaded succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"

        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/photoId"

    get:
      security:
        - bearerAuth: []
      tags:
        - Photo
      summary: retrieves a photo
      description: returns an Image
      operationId: servePhoto
      responses:
        "200":
          description: photo retrieved succesfully
          content:
            image/png:
              schema:
                $ref: "#/components/schemas/PhotoFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - bearerAuth: []
      tags:
        - Photo
      summary: delete a photo
      description: removes a photo from a user profile
      operationId: deletePhoto
      responses:
        "204":
          description: photo removed successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/photos/{photoId}/comments:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/photoId"

    post:
      security:
        - bearerAuth: []
      tags:
        - Comments
      summary: comments a photo
      description: leaves a comment under a photo
      operationId: commentPhoto
      requestBody:
        description: the body of the comment
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentBody"

      responses:
        "201":
          description: comment left succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"

        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/commentId"

    delete:
      security:
        - bearerAuth: []
      tags:
        - Comments
      summary: uncomments a photo
      description: removes a comment from a photo
      operationId: uncommentPhoto
      responses:
        "204":
          description: comment removed successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/photos/{photoId}/likes/{likerId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/likerId"

    put:
      security:
        - bearerAuth: []
      tags:
        - Like
      summary: adds a like to a photo
      description: the action of putting a like to a photo from the feed; userId will be the identifier for a like in that context
      operationId: likePhoto
      responses:
        "204":
          description: photo liked successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - bearerAuth: []
      tags:
        - Like
      summary: removes a like from a photo
      description: the action of removing a like from a photo from the feed
      operationId: unlikePhoto
      responses:
        "204":
          description: photo unliked successfully

        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  #jump to components

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  responses:
    #400 class responses
    #400
    BadRequest:
      description: syntax of the request was not compliant with docs, check parameters
    #403
    Forbidden:
      description: server will not accept request due to lacking of client permissions
    #404
    NotFound:
      description: resource not found

    #500 class responses
    #500
    InternalServerError:
      description: the server encountered an error while processing the request

  parameters:
    userId:
      description: identifier for a single user
      schema:
        $ref: "#/components/schemas/Identifier"
      name: userId
      in: path
      required: true

    followerId:
      description: identifier for a user that follows another
      schema:
        $ref: "#/components/schemas/Identifier"
      name: followerId
      in: path
      required: true

    bannerId:
      description: identifier for a user banning another
      schema:
        $ref: "#/components/schemas/Identifier"
      name: bannerId
      in: path
      required: true

    photoId:
      description: identifier for a photo
      schema:
        $ref: "#/components/schemas/Identifier"
      name: photoId
      in: path
      required: true

    commentId:
      description: identifier for a comment, used to retrieve comments
      schema:
        $ref: "#/components/schemas/Identifier"
      name: commentId
      in: path
      required: true

    likerId:
      name: likerId
      in: path
      required: true
      description: identifier for a user that likes a photo (it represents the actual like)
      schema:
        $ref: "#/components/schemas/Identifier"

  schemas:
    Identifier:
      title: identifier
      description: alphanumerical identifier for a resource
      type: string
      pattern: "^@[A-Z][0-9]{9}$"
      example: "@U000000001"
      readOnly: true
      minLength: 11
      maxLength: 11

    UserName:
      title: username
      description: user name associated with userId, part of a user obj
      type: string
      example: neosnakex34
      pattern: "^[a-z0-9]*?$"
      minLength: 3
      maxLength: 12

    UserFromQuery:
      title: userFromQuery
      description: resulting user from a query in a serchbox
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/Identifier"
        username:
          $ref: "#/components/schemas/UserName"
        isRequestorBanned:
          description: boolean value that tells if user is banned by the requestor
          type: boolean
          example: false
        requestorHasBanned:
          description: boolean value that tells if requestor has banned the user
          type: boolean
          example: true
        requestorHasFollowed:
          description: boolean value that tells if requestor has followed the user
          type: boolean
          example: false

    User:
      title: user
      description: user of WasaPhoto can do a number of actions
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/Identifier"
          #description: unique identifier for a single user

        username:
          $ref: "#/components/schemas/UserName"

    UserProfile:
      title: userProfile
      description: a user profile, providing info about follwers and following, photos and user related stuff
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/Identifier"
        username:
          $ref: "#/components/schemas/UserName"

        followerCounter:
          description: number of users following the owner of the profile
          type: integer
          minimum: 0
          example: 50

        followingCounter:
          description: number of users followed by the owner of the profile
          type: integer
          minimum: 0
          example: 12

        photoCounter:
          description: number of photos uploaded by the owner of the profile
          type: integer
          minimum: 0
          example: 336

        photos:
          description: list of photos uploaded by the user
          type: array
          minItems: 0
          maxItems: 1000 # as stated before i dont want to check this in backend, i want to display them all like instagram does, checks should only be used for structural limitations, but my design idea is to show them all (since it's a demo they would never be more than, let's say 100 photos MAX)
          items:
            $ref: "#/components/schemas/Photo"

    # in backend i will take file, convert into bytes and use it through the program
    # i can be more RESTful with those description, try to fix later
    PhotoFile:
      title: photoFile
      description: the actual file of the photo, as a stream of bytes retrieved by it's path in filesystem
      properties:
        path:
          description: position in filesystem for a file
          type: string
          minLength: 53
          maxLength: 53 # fixed position in filesystem change accordingly
          pattern: "^.?" # i wont set a real pattern since it messed up validators, checks wouls be done, if needed in real implementation i want to pass this exam.
          example: "/tmp/wasaphoto/photofiles/@U000111222/@P222333444.jpg"

        file:
          description: the actual file of the photo
          type: string
          format: binary
          pattern: "^.?" #since it is a binary string [byte array]
          minLength: 8 # to fit check for pngs header
          maxLength: 10485760 #binary 10 megs (2 power of 20 times 10)

    Photo:
      title: photo
      description: a photo on the platform
      type: object
      properties:
        photoId:
          $ref: "#/components/schemas/Identifier"

        # uploader user id
        uploaderUserId:
          $ref: "#/components/schemas/Identifier"

        uploaderUsername:
          $ref: "#/components/schemas/UserName"

        likes:
          description: number of likes the photo has recieved (represented by userId that liked the photo)
          type: integer
          example: 50

        likedByLoggedUser:
          description: boolean value that tells if the photo is liked by the logged user will be computed when retrieving photo
          type: boolean
          example: true

        comments:
          description: comments attached to the photo, made by users
          type: array
          minItems: 0
          maxItems: 100 # as stated above just for validator ecc, all comments must be displayed, additional logic checks would be made once one decides to scale app
          items:
            $ref: "#/components/schemas/Comment"

        commentsCounter:
          description: number of comments attached to the photo
          type: integer
          example: 4

        date:
          description: date of uploading
          type: string
          format: date-time
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$"
          example: "2021-05-12T09:00:00Z"
          minLength: 20
          maxLength: 20

        # what will be a photopath in struct (path + data)
        rawPhotoFile:
          $ref: "#/components/schemas/PhotoFile"

    CommentBody:
      description: body of the comment
      type: string
      minLength: 1
      maxLength: 400
      pattern: "^.*?$"
      example: "nice one bro"

    Comment:
      title: comment
      description: a comment on a photo
      type: object
      properties:
        commentId:
          $ref: "#/components/schemas/Identifier"

        userId:
          $ref: "#/components/schemas/Identifier"

        photoId:
          $ref: "#/components/schemas/Identifier"

        body:
          $ref: "#/components/schemas/CommentBody"

        date:
          description: date of the comment
          type: string
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$"
          format: date-time
          example: "2023-12-12T09:00:00Z"
          minLength: 20
          maxLength: 20
